<?php
/**
 * Plugin Name: Epic Marks Custom Blocks
 * Description: Custom Gutenberg blocks for Epic Marks website
 * Version: 1.0.7
 * Author: Epic Marks Development Team
 */

if (!defined('ABSPATH')) {
    exit;
}

class Epic_Marks_Blocks {

    public function __construct() {
        add_action('init', array($this, 'register_blocks'));
        add_action('enqueue_block_editor_assets', array($this, 'enqueue_editor_assets'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_frontend_assets'));
        add_action('admin_menu', array($this, 'add_settings_page'));
        add_action('admin_init', array($this, 'register_settings'));
    }

    /**
     * Add settings page to WordPress admin
     */
    public function add_settings_page() {
        add_options_page(
            'Countdown Timer Settings',
            'Countdown Timer',
            'manage_options',
            'em-countdown-settings',
            array($this, 'render_settings_page')
        );
    }

    /**
     * Register all countdown settings
     */
    public function register_settings() {
        // Cutoff time settings
        register_setting('em_countdown_settings', 'em_countdown_cutoff_hour', array(
            'type' => 'integer',
            'default' => 14,
            'sanitize_callback' => 'absint'
        ));

        register_setting('em_countdown_settings', 'em_countdown_cutoff_minute', array(
            'type' => 'integer',
            'default' => 0,
            'sanitize_callback' => 'absint'
        ));

        // Close on Sunday setting
        register_setting('em_countdown_settings', 'em_countdown_close_sunday', array(
            'type' => 'boolean',
            'default' => true
        ));

        // Holiday dates
        register_setting('em_countdown_settings', 'em_countdown_holidays', array(
            'type' => 'string',
            'default' => '2025-01-01, 2025-07-04, 2025-11-27, 2025-12-25',
            'sanitize_callback' => 'sanitize_textarea_field'
        ));

        // Extra closed dates
        register_setting('em_countdown_settings', 'em_countdown_extra_closed', array(
            'type' => 'string',
            'default' => '',
            'sanitize_callback' => 'sanitize_textarea_field'
        ));

        // Message templates
        register_setting('em_countdown_settings', 'em_countdown_msg_active', array(
            'type' => 'string',
            'default' => 'Order in {time} to ship today (by {cutoff}).',
            'sanitize_callback' => 'sanitize_text_field'
        ));

        register_setting('em_countdown_settings', 'em_countdown_msg_after', array(
            'type' => 'string',
            'default' => 'Orders after 2 PM ship next business day ({date} by {time}).',
            'sanitize_callback' => 'sanitize_text_field'
        ));

        register_setting('em_countdown_settings', 'em_countdown_msg_closed', array(
            'type' => 'string',
            'default' => 'Closed today — orders process {date} by {time}.',
            'sanitize_callback' => 'sanitize_text_field'
        ));

        // Temporary override
        register_setting('em_countdown_settings', 'em_countdown_override', array(
            'type' => 'boolean',
            'default' => false
        ));

        register_setting('em_countdown_settings', 'em_countdown_override_msg', array(
            'type' => 'string',
            'default' => 'Temporarily closed — orders process next business day.',
            'sanitize_callback' => 'sanitize_text_field'
        ));

        // Add settings sections
        add_settings_section(
            'em_countdown_section_cutoff',
            'Cutoff Time Settings',
            array($this, 'render_section_cutoff'),
            'em-countdown-settings'
        );

        add_settings_section(
            'em_countdown_section_closed',
            'Closed Dates',
            array($this, 'render_section_closed'),
            'em-countdown-settings'
        );

        add_settings_section(
            'em_countdown_section_messages',
            'Message Templates',
            array($this, 'render_section_messages'),
            'em-countdown-settings'
        );

        add_settings_section(
            'em_countdown_section_override',
            'Temporary Override',
            array($this, 'render_section_override'),
            'em-countdown-settings'
        );

        // Add fields
        add_settings_field('em_countdown_cutoff_hour', 'Cutoff Hour (0-23)', array($this, 'render_field_cutoff_hour'), 'em-countdown-settings', 'em_countdown_section_cutoff');
        add_settings_field('em_countdown_cutoff_minute', 'Cutoff Minute (0-59)', array($this, 'render_field_cutoff_minute'), 'em-countdown-settings', 'em_countdown_section_cutoff');
        add_settings_field('em_countdown_close_sunday', 'Close on Sundays', array($this, 'render_field_close_sunday'), 'em-countdown-settings', 'em_countdown_section_cutoff');

        add_settings_field('em_countdown_holidays', 'US Holidays (YYYY-MM-DD)', array($this, 'render_field_holidays'), 'em-countdown-settings', 'em_countdown_section_closed');
        add_settings_field('em_countdown_extra_closed', 'Additional Closed Dates', array($this, 'render_field_extra_closed'), 'em-countdown-settings', 'em_countdown_section_closed');

        add_settings_field('em_countdown_msg_active', 'Before Cutoff Message', array($this, 'render_field_msg_active'), 'em-countdown-settings', 'em_countdown_section_messages');
        add_settings_field('em_countdown_msg_after', 'After Cutoff Message', array($this, 'render_field_msg_after'), 'em-countdown-settings', 'em_countdown_section_messages');
        add_settings_field('em_countdown_msg_closed', 'Closed Today Message', array($this, 'render_field_msg_closed'), 'em-countdown-settings', 'em_countdown_section_messages');

        add_settings_field('em_countdown_override', 'Temporarily Closed', array($this, 'render_field_override'), 'em-countdown-settings', 'em_countdown_section_override');
        add_settings_field('em_countdown_override_msg', 'Override Message', array($this, 'render_field_override_msg'), 'em-countdown-settings', 'em_countdown_section_override');
    }

    /**
     * Render settings page
     */
    public function render_settings_page() {
        ?>
        <div class="wrap">
            <h1>Countdown Timer Settings</h1>
            <p>Configure the countdown timer that appears in the header. All times are in America/Chicago timezone (Central Time).</p>
            <form method="post" action="options.php">
                <?php
                settings_fields('em_countdown_settings');
                do_settings_sections('em-countdown-settings');
                submit_button();
                ?>
            </form>
        </div>
        <?php
    }

    // Section descriptions
    public function render_section_cutoff() {
        echo '<p>Set the daily cutoff time for same-day processing (America/Chicago timezone).</p>';
    }

    public function render_section_closed() {
        echo '<p>Enter dates in YYYY-MM-DD format, separated by commas or newlines.</p>';
    }

    public function render_section_messages() {
        echo '<p>Use template variables: {time} (countdown), {date} (next open date), {cutoff} (cutoff time).</p>';
    }

    public function render_section_override() {
        echo '<p>Use this to temporarily close the countdown with a custom message.</p>';
    }

    // Field renderers
    public function render_field_cutoff_hour() {
        $value = get_option('em_countdown_cutoff_hour', 14);
        echo '<input type="number" name="em_countdown_cutoff_hour" value="' . esc_attr($value) . '" min="0" max="23" class="small-text"> (Default: 14 = 2:00 PM CT)';
    }

    public function render_field_cutoff_minute() {
        $value = get_option('em_countdown_cutoff_minute', 0);
        echo '<input type="number" name="em_countdown_cutoff_minute" value="' . esc_attr($value) . '" min="0" max="59" class="small-text"> (Default: 0 = :00)';
    }

    public function render_field_close_sunday() {
        $value = get_option('em_countdown_close_sunday', true);
        echo '<label><input type="checkbox" name="em_countdown_close_sunday" value="1" ' . checked($value, true, false) . '> Closed on Sundays</label>';
    }

    public function render_field_holidays() {
        $value = get_option('em_countdown_holidays', '2025-01-01, 2025-07-04, 2025-11-27, 2025-12-25');
        echo '<textarea name="em_countdown_holidays" rows="5" cols="50" class="large-text">'. esc_textarea($value) .'</textarea><br>';
        echo '<em>Example: 2025-01-01, 2025-07-04, 2025-12-25</em>';
    }

    public function render_field_extra_closed() {
        $value = get_option('em_countdown_extra_closed', '');
        echo '<textarea name="em_countdown_extra_closed" rows="5" cols="50" class="large-text">'. esc_textarea($value) .'</textarea><br>';
        echo '<em>Add special closed dates (vacations, company events, etc.)</em>';
    }

    public function render_field_msg_active() {
        $value = get_option('em_countdown_msg_active', 'Order in {time} to ship today (by {cutoff}).');
        echo '<input type="text" name="em_countdown_msg_active" value="' . esc_attr($value) . '" class="large-text">';
    }

    public function render_field_msg_after() {
        $value = get_option('em_countdown_msg_after', 'Orders after 2 PM ship next business day ({date} by {time}).');
        echo '<input type="text" name="em_countdown_msg_after" value="' . esc_attr($value) . '" class="large-text">';
    }

    public function render_field_msg_closed() {
        $value = get_option('em_countdown_msg_closed', 'Closed today — orders process {date} by {time}.');
        echo '<input type="text" name="em_countdown_msg_closed" value="' . esc_attr($value) . '" class="large-text">';
    }

    public function render_field_override() {
        $value = get_option('em_countdown_override', false);
        echo '<label><input type="checkbox" name="em_countdown_override" value="1" ' . checked($value, true, false) . '> Enable temporary closure message</label>';
    }

    public function render_field_override_msg() {
        $value = get_option('em_countdown_override_msg', 'Temporarily closed — orders process next business day.');
        echo '<input type="text" name="em_countdown_override_msg" value="' . esc_attr($value) . '" class="large-text">';
    }

    public function register_blocks() {
        // Register wave block
        register_block_type('epic-marks/wave-block', array(
            'editor_script' => 'epic-marks-blocks',
            'style' => 'epic-marks-blocks-style',
            'render_callback' => array($this, 'render_wave_block')
        ));

        // Register countdown block
        register_block_type('epic-marks/countdown-block', array(
            'editor_script' => 'epic-marks-blocks',
            'style' => 'epic-marks-blocks-style',
            'render_callback' => array($this, 'render_countdown_block')
        ));

        // Register USP block
        register_block_type('epic-marks/usp-block', array(
            'editor_script' => 'epic-marks-blocks',
            'style' => 'epic-marks-blocks-style',
            'render_callback' => array($this, 'render_usp_block')
        ));
    }

    public function enqueue_editor_assets() {
        wp_enqueue_script(
            'epic-marks-blocks',
            plugins_url('assets/blocks.js', __FILE__),
            array('wp-blocks', 'wp-element', 'wp-editor', 'wp-components', 'wp-i18n'),
            filemtime(plugin_dir_path(__FILE__) . 'assets/blocks.js')
        );

        wp_enqueue_style(
            'epic-marks-blocks-style',
            plugins_url('assets/blocks.css', __FILE__),
            array(),
            filemtime(plugin_dir_path(__FILE__) . 'assets/blocks.css')
        );
    }

    public function enqueue_frontend_assets() {
        wp_enqueue_style(
            'epic-marks-blocks-style',
            plugins_url('assets/blocks.css', __FILE__),
            array(),
            filemtime(plugin_dir_path(__FILE__) . 'assets/blocks.css')
        );
    }

    public function render_wave_block($attributes) {
        $wave_height = isset($attributes['waveHeight']) ? $attributes['waveHeight'] : 80;
        $wave_height_mobile = isset($attributes['waveHeightMobile']) ? $attributes['waveHeightMobile'] : 60;
        $wave_color = isset($attributes['waveColor']) ? $attributes['waveColor'] : '#627a94';
        $animate = isset($attributes['animate']) ? $attributes['animate'] : true;
        $rotate = isset($attributes['rotate']) ? $attributes['rotate'] : false;
        $background_color = isset($attributes['backgroundColor']) ? $attributes['backgroundColor'] : 'transparent';
        $bottom_section_height = isset($attributes['bottomSectionHeight']) ? $attributes['bottomSectionHeight'] : 100;

        $unique_id = 'wave-' . uniqid();
        $animate_class = $animate ? 'em-waves-animated' : '';
        $rotate_class = $rotate ? 'em-waves-rotated' : '';

        ob_start();
        ?>
        <style>
            #<?php echo $unique_id; ?>-container {
                position: relative;
                width: 100vw;
                left: 50%;
                right: 50%;
                margin-left: -50vw;
                margin-right: -50vw;
                background: <?php echo esc_attr($background_color); ?>;
            }
            #<?php echo $unique_id; ?>-waves {
                position: relative;
                height: <?php echo $wave_height_mobile; ?>px;
                min-height: <?php echo $wave_height_mobile; ?>px;
                max-height: <?php echo $wave_height_mobile; ?>px;
                overflow: hidden;
            }
            @media (min-width: 768px) {
                #<?php echo $unique_id; ?>-waves {
                    height: <?php echo $wave_height; ?>px;
                    min-height: <?php echo $wave_height; ?>px;
                    max-height: <?php echo $wave_height; ?>px;
                }
            }
            #<?php echo $unique_id; ?>-waves svg {
                position: absolute;
                bottom: 0;
                width: 100%;
                height: 100%;
            }
            #<?php echo $unique_id; ?>-bottom {
                width: 100%;
                height: <?php echo $bottom_section_height; ?>px;
                background: <?php echo esc_attr($wave_color); ?>;
            }
            #<?php echo $unique_id; ?>-waves.em-waves-rotated {
                transform: rotate(180deg);
            }
            <?php if ($animate): ?>
            #<?php echo $unique_id; ?>-waves.em-waves-animated .wave-parallax-1 > use {
                animation: move-forever-1-<?php echo $unique_id; ?> 10s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
            }
            #<?php echo $unique_id; ?>-waves.em-waves-animated .wave-parallax-2 > use {
                animation: move-forever-2-<?php echo $unique_id; ?> 8s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
            }
            #<?php echo $unique_id; ?>-waves.em-waves-animated .wave-parallax-3 > use {
                animation: move-forever-3-<?php echo $unique_id; ?> 6s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
            }
            #<?php echo $unique_id; ?>-waves.em-waves-animated .wave-parallax-4 > use {
                animation: move-forever-4-<?php echo $unique_id; ?> 4s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;
            }
            @keyframes move-forever-1-<?php echo $unique_id; ?> {
                0% { transform: translate3d(85px, 0, 0); }
                100% { transform: translate3d(-90px, 0, 0); }
            }
            @keyframes move-forever-2-<?php echo $unique_id; ?> {
                0% { transform: translate3d(-90px, 0, 0); }
                100% { transform: translate3d(85px, 0, 0); }
            }
            @keyframes move-forever-3-<?php echo $unique_id; ?> {
                0% { transform: translate3d(85px, 0, 0); }
                100% { transform: translate3d(-90px, 0, 0); }
            }
            @keyframes move-forever-4-<?php echo $unique_id; ?> {
                0% { transform: translate3d(-90px, 0, 0); }
                100% { transform: translate3d(85px, 0, 0); }
            }
            <?php endif; ?>
        </style>
        <div id="<?php echo $unique_id; ?>-container" class="em-wave-full-container">
            <div id="<?php echo $unique_id; ?>-waves" class="em-wave-container <?php echo $animate_class; ?> <?php echo $rotate_class; ?>">
                <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 24 150 28" preserveAspectRatio="none" shape-rendering="auto">
                    <defs>
                        <path id="gentle-wave-<?php echo $unique_id; ?>" d="M-160 44c30 0 58-18 88-18s 58 18 88 18 58-18 88-18 58 18 88 18 v44h-352z"/>
                    </defs>
                    <g class="wave-parallax-1">
                        <use xlink:href="#gentle-wave-<?php echo $unique_id; ?>" x="50" y="3" fill="<?php echo esc_attr($wave_color); ?>" fill-opacity="0.4"/>
                    </g>
                    <g class="wave-parallax-2">
                        <use xlink:href="#gentle-wave-<?php echo $unique_id; ?>" x="50" y="0" fill="<?php echo esc_attr($wave_color); ?>" fill-opacity="0.3"/>
                    </g>
                    <g class="wave-parallax-3">
                        <use xlink:href="#gentle-wave-<?php echo $unique_id; ?>" x="50" y="9" fill="<?php echo esc_attr($wave_color); ?>" fill-opacity="0.2"/>
                    </g>
                    <g class="wave-parallax-4">
                        <use xlink:href="#gentle-wave-<?php echo $unique_id; ?>" x="50" y="6" fill="<?php echo esc_attr($wave_color); ?>" fill-opacity="0.1"/>
                    </g>
                </svg>
            </div>
            <div id="<?php echo $unique_id; ?>-bottom" class="em-wave-bottom-section"></div>
        </div>
        <?php
        return ob_get_clean();
    }

    public function render_countdown_block($attributes) {
        $background_color = isset($attributes['backgroundColor']) ? $attributes['backgroundColor'] : '#627a94';
        $text_color = isset($attributes['textColor']) ? $attributes['textColor'] : '#ffffff';
        $text_size = isset($attributes['textSize']) ? $attributes['textSize'] : 18;
        $countdown_text = isset($attributes['countdownText']) ? $attributes['countdownText'] : 'Order in 2h 30m to ship today (by 2:00 PM CT).';
        $padding_top = isset($attributes['paddingTop']) ? $attributes['paddingTop'] : 12;
        $padding_bottom = isset($attributes['paddingBottom']) ? $attributes['paddingBottom'] : 12;

        $unique_id = 'countdown-' . uniqid();

        // Get countdown settings from WordPress options
        $cutoff_hour = get_option('em_countdown_cutoff_hour', 14);
        $cutoff_minute = get_option('em_countdown_cutoff_minute', 0);
        $close_sunday = get_option('em_countdown_close_sunday', true);
        $holidays = get_option('em_countdown_holidays', '2025-01-01, 2025-07-04, 2025-11-27, 2025-12-25');
        $extra_closed = get_option('em_countdown_extra_closed', '');
        $msg_active = get_option('em_countdown_msg_active', 'Order in {time} to ship today (by {cutoff}).');
        $msg_after = get_option('em_countdown_msg_after', 'Orders after 2 PM ship next business day ({date} by {time}).');
        $msg_closed = get_option('em_countdown_msg_closed', 'Closed today — orders process {date} by {time}.');
        $override = get_option('em_countdown_override', false);
        $override_msg = get_option('em_countdown_override_msg', 'Temporarily closed — orders process next business day.');

        ob_start();
        ?>
        <script>
        window.EM_COUNTDOWN_CONFIG = {
            tz: "America/Chicago",
            cutoffHour: <?php echo intval($cutoff_hour); ?>,
            cutoffMinute: <?php echo intval($cutoff_minute); ?>,
            closeOnSunday: <?php echo $close_sunday ? 'true' : 'false'; ?>,
            holidays: <?php echo json_encode($holidays); ?>,
            extraClosed: <?php echo json_encode($extra_closed); ?>,
            overrideClosed: <?php echo $override ? 'true' : 'false'; ?>,
            overrideMessage: <?php echo json_encode($override_msg); ?>,
            msgActive: <?php echo json_encode($msg_active); ?>,
            msgAfter: <?php echo json_encode($msg_after); ?>,
            msgClosed: <?php echo json_encode($msg_closed); ?>
        };
        </script>
        <div id="<?php echo $unique_id; ?>" class="em-countdown-banner" style="
            position: relative;
            width: 100vw;
            left: 50%;
            right: 50%;
            margin-left: -50vw;
            margin-right: -50vw;
            background: <?php echo esc_attr($background_color); ?>;
            color: <?php echo esc_attr($text_color); ?>;
            padding: <?php echo esc_attr($padding_top); ?>px 1rem <?php echo esc_attr($padding_bottom); ?>px 1rem;
            text-align: center;
            font-size: <?php echo esc_attr($text_size); ?>px;
            font-weight: 700;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.4;
        ">
            <span id="<?php echo $unique_id; ?>-text"><?php echo esc_html($countdown_text); ?></span>
        </div>
        <?php
        return ob_get_clean();
    }

    public function render_usp_block($attributes) {
        $icon = isset($attributes['icon']) ? trim($attributes['icon']) : '';
        $title = isset($attributes['title']) ? $attributes['title'] : 'Feature Title';
        $icon_size = isset($attributes['iconSize']) ? $attributes['iconSize'] : 32;
        $title_size = isset($attributes['titleSize']) ? $attributes['titleSize'] : 16;
        $text_color = isset($attributes['textColor']) ? $attributes['textColor'] : '#454C57';
        $background_color = isset($attributes['backgroundColor']) ? $attributes['backgroundColor'] : 'transparent';
        $border_radius = isset($attributes['borderRadius']) ? $attributes['borderRadius'] : 0;
        $box_shadow = isset($attributes['boxShadow']) ? $attributes['boxShadow'] : false;
        $padding = isset($attributes['padding']) ? $attributes['padding'] : 16;

        $unique_id = 'usp-' . uniqid();
        $shadow_style = $box_shadow ? '0 2px 6px rgba(0,0,0,0.08)' : 'none';

        ob_start();
        ?>
        <div id="<?php echo $unique_id; ?>" class="em-usp-item" style="
            text-align: center;
            color: <?php echo esc_attr($text_color); ?>;
            background: <?php echo esc_attr($background_color); ?>;
            border-radius: <?php echo esc_attr($border_radius); ?>px;
            box-shadow: <?php echo $shadow_style; ?>;
            padding: <?php echo esc_attr($padding); ?>px;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        ">
            <?php if (!empty($icon)): ?>
            <div class="em-usp-icon" style="font-size: <?php echo esc_attr($icon_size); ?>px; margin-bottom: 8px; line-height: 1;">
                <?php echo esc_html($icon); ?>
            </div>
            <?php endif; ?>
            <div class="em-usp-title" style="font-size: <?php echo esc_attr($title_size); ?>px; font-weight: 600; text-transform: uppercase;">
                <?php echo esc_html($title); ?>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
}

new Epic_Marks_Blocks();
